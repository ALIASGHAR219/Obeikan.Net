{"version":3,"file":"ngx-datetime-range-picker.component.d.ts","sources":["ngx-datetime-range-picker.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnChanges, SimpleChanges, Renderer2 } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { NgxDatetimeRangePickerService } from \"./ngx-datetime-range-picker.service\";\nimport { Options, Settings, State, DateSide, DateCharacteristics, DateRangeModel, Config, TimeSide, DateTimeRangeChangeOutput, DateTimeRangeModelChangeOutput } from \"./interfaces\";\nexport declare class NgxDatetimeRangePickerComponent implements OnChanges {\n    element: ElementRef;\n    private renderer;\n    private service;\n    options: Options;\n    settings: Settings;\n    optionService: Observable<any>;\n    dateRangeModel: Options | DateRangeModel;\n    canBeEmpty: boolean;\n    dateRangeModelChange: EventEmitter<Options | DateRangeModel>;\n    dateRangeChanged: EventEmitter<Options>;\n    inputFocusBlur: EventEmitter<Object>;\n    selectedDate: EventEmitter<Options>;\n    filterInputBox: any;\n    state: State;\n    config: Config;\n    constructor(element: ElementRef, renderer: Renderer2, service: NgxDatetimeRangePickerService);\n    ngOnChanges(changes: SimpleChanges): void;\n    onDateRangeInputChange(value: string): void;\n    setDisabledState(disabled: boolean): void;\n    onComponentClick(): void;\n    onFocusInput(event: MouseEvent): void;\n    onBlurInput(event: MouseEvent): void;\n    onCalendarClose(event: MouseEvent): void;\n    isPrevAvailable(side: any): boolean;\n    isNextAvailable(side: any): boolean;\n    getCalendarColspan(): number;\n    getCalendarRowItemColspan(): number;\n    onClickPrevious(side: string): void;\n    onClickNext(side: string): void;\n    onCellClick(item: DateCharacteristics, itemCell: any, side: string): void;\n    onCellMouseEnter(item: DateCharacteristics, itemCell: any): void;\n    onCellMouseLeave(): void;\n    onRangeClick(rangeLabel: string, dateRangeModel: Options): void;\n    updateCalendar(): void;\n    onCalendarLabelChange(label: string, side: string, type: string): void;\n    onTimeLabelChange(item: string, side: string, timeItem: string): void;\n    onTimeApply(): void;\n    init(): void;\n    initialize(): void;\n    parseOptions(): void;\n    selectTimeZone(): void;\n    parseOptionsToDefaultDateFormat(): void;\n    /**\n     * @desc sets startDate, endDate\n     */\n    processDateRangeModel(): void;\n    /**\n     * @desc sets minDate, maxDate, startDate, endDate if not passed\n     */\n    handleDateArray(): void;\n    sanitizeDates(): void;\n    processRanges(): void;\n    selectActiveRange(): void;\n    generateCalendar(date: string | number, side: string): DateSide;\n    generateTimePicker(time: string, side: string): TimeSide;\n    updateInputField(): void;\n    updateActiveItemInputField(): void;\n    updateSide(side: string): void;\n    dateRangeSelected(): void;\n    doDateRangeModelChange(): void;\n    getDateRangeModel(format?: string): DateTimeRangeModelChangeOutput;\n    getNgxDatetimeRangeChangeOutput(format?: string): DateTimeRangeChangeOutput;\n    doApply(): void;\n    onTimezoneChange(tz: string): void;\n    getSelectedTimeItemText(item: string, side: string): any;\n    setActiveItemOnRangeClick(): void;\n    updateActiveItem(): void;\n    printSelect(options: {\n        type: string;\n        side: string;\n        items: string[];\n        selected: string;\n        onChange: Function;\n    }): void;\n}\n"]}